[JDBC DB 연동]

  1. 커넥션 연결

  2. statement
    SQL문 전송
    connection.statement
    preparestatement

  3. execute
    실행, 실행 결과물 받아옴

  4. 결과물 SELECT -> java object 변환, return
          INSERT / UPDATE / DELETE -> int값 return
----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
[Mybatis DB 연동]

  1 ~ 4. JDBC기반이지만 어노테이션으로 자동처리

  ※ 2번의 SQL문과 4번의 결과물 타입 주의

[ORM : Object-Relational Mapping]

  객체 지향 프로그래밍 언어에서 사용하는 객체와
  관계형 데이터베이스의 테이블을 연결해주는 기술

  SQL 쿼리를 직접 작성하지 않고도
  객체 기반으로 데이터베이스 작업을 수행할 수 있도록 도와주는 도구

  SELECT 결과
  * 컬럼명과 변수명이 일치하면 자동으로 저장해준다.

[DAO]

  public interface dao {
   
    @Mapper 구현 객체 자동 생성
    추상메서드

    * (Mapper 어노테이션은 메인 클래스가 위치한 패키지나
       하위 패키지에 있을 때만 구현객체를 생성한다.)

  }

  @Insert @Update @Delete @Select

    각각의 애노테이션은 실행하고자 하는 SQL을 표현한다.
    각각 문자열의 배열(또는 한개의 문자열)을 가진다.
    문자열의 배열이 전달되면, 각각 공백을 두고 하나로 합친다.
    자바 코드에서 SQL 을 만들때 발행할 수 있는 “공백 누락” 문제를 해결하도록 도와준다.

    사용가능한 속성들 : value(한개의 SQL 구문을 만들기위한 문자열의 배열)

  SELECT 실행 메서드

    @Select ("select SQL문")
    리턴타입 이름();

    ※ 중요 : 리턴 타입
      - 레코드 여러 줄, 컬럼 여러개
        1. List<DTO>
        2. List<Map<String, Object>>

      - 레코드 여러 줄, 컬럼 한개
        List<String || int || java.util.Date>

      - 레코드 한 줄, 컬럼 여러개
        1. DTO
        2. Map<String, Object>

      - 레코드 한 줄, 컬럼 한개
        String || int || java.util.Date
    ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
    매개변수
      1. SQL문에 필요한 값 지정
        SELECT * FROM dept WHERE deptno = #{deptno};
        값이 필요한 곳에서는 #{}표현식으로 값을 넣어준다.

      2. 매개변수로 필요한 값을 넘겨준다.
        리턴타입 이름(@Param("deptno") int deptno)

        = 2의 매개변수 deptno을 "deptno"이라는 이름으로 가져와 1의 SQL문의 #{deptno}에 넣어 반환한다.

        * 필요한 값이 하나일 때는 굳이 @Param을 사용하지 않아도 된다.
          = 리턴타입 이름(int deptno)

      ex1) SELECT * FORM dept WHERE dname = #{dname} and loc = #{loc};
            List<Dept> 이름(@Param("dname") String dname, @Param("loc") String loc)
            = dname과 loc은 primary key, Not Null이 아니기 때문에 여러 값이 반환될 수 있다.
              때문에 리턴타입은 List<Dept>
      
      ex2) SELECT count(*) FORM dept;
            int 이름()
            = #{}같은 필요한 값이 없기 때문에 매개변수는 비우고 반환값이 count
              때문에 리턴타입은 int
  ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
  INSERT / UPDATE / DELETE 실행 메서드

    @Insert / Update / Delete("insert / update / delete SQL문")
    리턴타입 이름();

    리턴타입 -> int (변경된 레코드 개수 반환)

[DTO]
  
  :컬럼명 == 변수명

  컬럼명과 변수명을 일치시키는 이유는 SQL의 컬럼에 맞는 데이터를
  변수에 자동으로 저장시켜주기 위함이다.

  만약 일치시키지 않는다면 SQL문에서 [별칭]을 사용해 저장이 가능하다.

  SELECT deptno AS "dno" || deptno "dno" || deptno dno
  FROM dept;

[Service]

  service

1. 부서 정보 출력

2. 부서 추가
  GET: /insert DeptController form() dept/insert.html
  POST: /insert DeptController insert() redirect:/dept

  2-1. 새로운 부서번호 만들기
      SELECT max(deptno) + 10 FROM dept;

  2-2. insert
      INSERT INTO dept VALUES(#{deptno}, #{dname}, #{loc});

  2-3. DAO -> SQL문 개수별 method 생성

3. 부서명 클릭 시 해당 부서 근무지 수정
  GET: /update/{no} DeptController updateForm() dept/update.html :form에 loc 입력(부서번호 hidden)
  PUT: /update DeptController update() redirect:/dept :부서번호와 근무지 받아서 근무지 수정

4. 부서 삭제
  DELETE: /delete/{no} DeptController delete() redirect:/dept
  
* 부서명 클릭 시 해당 부서 사원 정보 출력
