MVC패턴

      Model
    ↗      ↘
View   ←-   Controller


spring MVC
DB 연동 프레임워크 : Mybatis / JPA
Java 기반 크롤링 : Jsoup
시큐리티

+ react
---------------------------------------------------------
src/main/java : 패키지와 클래스 작성

src/main/resource 

-templates : 타임리프 같은 템플릿 기반의 웹 리소스 저장 

-static : HTML 같은 정적인 웹 리소스

-application.properties : 프로젝트 전체에서 사용할 프로퍼티 정보들을 저장
---------------------------------------------------------
1. 프로젝트 생성
    main클래스에 어노테이션 추가
    @ComponentScan(basePackages ="com.example")

2. application.properties파일 설정정보 추가
    server.port=8081

3. controller 생성
    패키지  com.example.controller

    [HelloController .java]
    package com.example.controller;

    import org.springframework.stereotype.Controller;
    import org.springframework.web.bind.annotation.GetMapping;
    import org.springframework.web.bind.annotation.ResponseBody;

    @Controller
    public class HelloController {

        @GetMapping("/hello")
        @ResponseBody
        public String hello(){
            return "hello spring!";
        }

    }

4. view 생성
    [static/index.html]
    <h1>인덱스 페이지 입니다.</h1>

5. 실행
    localhost:8081
    localhost:8081/hello
---------------------------------------------------------
요청 uri - 컨트롤러 - view

1.
@Controller
  클래스

2.
@Get/PostMapping("요청uri")
  메서드

URL
protocol://ip(domain):port/path?query(name=value)#id
/path == 요청uri

3. view 페이지가 있다면
  메서드 리턴 타입 : String
  리턴 값 - 뷰 경로 "templates하위 폴더부터 파일명"까지 입력
              ex) (templates/)"view/hello2"

4. view에 보낼 데이터가 있다면
  Model에 저장(view에 전달)
  모델데이터 : 이름 - 값으로 구성
  view에서는 타임리프를 이용해 출력

경로 부분이 동일할 경우 클래스에 @RequestMapping("/test")
  /test/hello -> HelloController - hello()
  /test/hello2 -> HelloController - hello2()
---------------------------------------------------------
error code
200 : 정상 처리

400 : spring에서 400번 에러는 잘못된 파라미터 값
404 : 경로 에러. 해당 경로에 맞는 리소스나 파일이 없음.
500 : 실행 중 에러(exception)
---------------------------------------------------------
@RequestParam
(value = "파라미터이름",
 required = true / false,
 defaultValue = "기본값")

@RequestParam 매개변수
@RequestParam("파라미터 이름") 매개변수
@RequestParam(value = "파라미터 이름", defaultValue = "기본값") 기본형 매개변수
           ※ 기본형 매개변수는 NUll값 저장 불가하기 때문에 defaultValue 사용 권장
---------------------------------------------------------
MVC패턴

spring MVC동작방식

@Controller
@GetMapping("path")

파라미터값 받아오기
command 객체
@RequestParam

@ModelAttribute
---------------------------------------------------------
1. 파라미터 값 저장

2. 비지니스 로직 수행

3. 모델에 결과 추가
   3-1. 매개변수로 Model 구현객체 받아오기
        public String 이름(Model m) {
          m.addAttribute("이름", "값");
        } // Dispatcher Servelet이 자동 생성, 간편

   3-2. 모델 구현객체 생성
        public Model 이름() {
          Model m = new Model구현클래스().addAttribute("이름", "값");
          return m;
        } // 구현 클래스를 직접 찾아 생성, return 명시, 불편

   @ModelAttribute - 요청 처리 메서드의 매개변수 앞
                     : 매개변수로 전달된 객체 -> DS 생성
                     -> 자동으로 view 전달 -> 이름 지정

                   - 컨트롤러 클래스의 메서드
                     : 컨트롤러에 요청이 들어오면 요청처리 메서드보다 먼저 수행
                     리턴값을 model에 추가(view에 전달)

                     컨트롤러 클래스 안에 @ModelAttribute붙은 모든 메서드 선처리
                     @ModelAttribute메서드가 다 끝났다면 요청처리 메서드 수행

4. 뷰 지정
   리턴타입 : String - 리턴값이 view name
             void - URL path 부분 사용해 자동 설정

   비지니스 로직 수행 후 화면 필요없이 다음 작업으로 넘어가는 경우 - 리다이렉트 처리
   redirect:/요청uri -> 요청 a에서 자동으로 컨트롤러
                       컨트롤러 -> 요청 b로

   리턴타입 : String return "redirect:/요청uri"
---------------------------------------------------------
String, 기본형, toString()
[[${ 모델 속성명 }]]

${ 객체.변수명 }
${ Map.key } 
---------------------------------------------------------
RESTful요청 방식
/list 

GET : 서버에 있는 리소스를 가져오기
POST : 서버에 새로운 리소스 추가

  html은 GET과 POST방식밖에 없지만 spring에서 POST방식 중 추가적인 요청방식
  사용 방법 : <form method="POST">
             <input type="hidden" name="_method" value="PUT, DELETE, PATCH">


  - PUT : 리소스 전체 업데이트(수정 용도)
  - PATCH : 리소스 일부 업데이트(수정 용도)
  - DELETE : 서버에 있는 리소스 삭제

  -- 수정용도이다보니 view가 없음(요청방식 처리 후 redirect)

protocol://host:port/경로1/아이디/페이지번호
@PathVariable("템플릿 변수명")

@~Mapping("/경로1/{id}/{page}")
경로 상의 아이디, 페이지번호를 각각 id, page라는 템플릿 변수에 저장

public String 이름(@PathVariable("id") String id, 
                  @PathVariableint("page") int page) {}